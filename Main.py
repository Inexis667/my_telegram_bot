from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
import asyncio
import random
from datetime import datetime
BOT_TOKEN = "8285221368:AAGeHopGEPs22eZfXbA-U_-Fdn9tqpeuDwM"

bot = Bot(token='8285221368:AAGeHopGEPs22eZfXbA-U_-Fdn9tqpeuDwM')
dp = Dispatcher()

users = set()
first_start_times = {}

@dp.message(Command("start"))
async def send_hello(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    if user_id not in first_start_times:
        first_start_times[user_id] = datetime.now().strftime("%d.%m.%Y %H:%M")

    if user_id not in users:
        users.add(user_id)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n"
                         f"–Ø –≠—Ö–æ-–ë–æ—Ç –∏ –ë–æ—Ç-–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–≤—Ç–æ—Ä—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!. \n\n"
                         f"–¢—ã —Ç–µ–ø–µ—Ä—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! üíæ"
                         f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                         f"/help ‚Äî –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n"
                         f"/about ‚Äî –æ–±–æ –º–Ω–µ\n"
                         f"/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ\n"
                         f"/mood ‚Äî –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–æ—Ç–∞ üé≠\n\n"
        )
    else:
        await message.answer(f"–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, {user_name}! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòä")

@dp.message(Command("hello"))
async def send_hello(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π Telegram-–±–æ—Ç!")

@dp.message(Command("help"))
async def send_help(message: types.Message):
    await message.answer(
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "üí¨ /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚ÑπÔ∏è /about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
        "üë§ /info ‚Äî –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "üé≠ /mood ‚Äî —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–æ—Ç–∞\n\n"
        "–ê –µ—â—ë –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ:\n"
        "¬´–ü—Ä–∏–≤–µ—Ç¬ª, ¬´–ö–∞–∫ –¥–µ–ª–∞¬ª, ¬´–ß—Ç–æ –¥–µ–ª–∞–µ—à—å¬ª, ¬´–ü–æ–∫–∞¬ª\n\n"
        "‚ùì –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø–æ–≤—Ç–æ—Ä—é –µ–≥–æ!\n\n"
        "‚ùì –ï—Å–ª–∏ –Ω–∞–ø–∏—à–µ—à—å –≤–æ–ø—Ä–æ—Å (—Å '?'), —è –æ—Ç—Ä–µ–∞–≥–∏—Ä—É—é –æ—Å–æ–±—ã–º –æ–±—Ä–∞–∑–æ–º üòâ\n"
        "–ï—Å–ª–∏ –≤–≤–µ–¥—ë—à—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É ‚Äî –ø–æ–¥—Å–∫–∞–∂—É üòâ",
        parse_mode="HTML"
    )

@dp.message(Command("about"))
async def send_about(message: types.Message):
    await message.answer(
        "üìò <b>–û –ø—Ä–æ–µ–∫—Ç–µ:</b>\n\n"
        "–ê–≤—Ç–æ—Ä: <b>–ê–º–∞–Ω—à—É–∫—É—Ä –ê–ª–∏–∂–∞–Ω</b>\n"
        "–ü—Ä–æ–µ–∫—Ç: <i>–£—á–µ–±–Ω—ã–π –≠—Ö–æ-–ë–æ—Ç –∏ –ë–æ—Ç-–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞ Python (Aiogram)</i>\n\n"
        "üéØ –§—É–Ω–∫—Ü–∏–∏:\n"
        "‚Äî –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start, /help, /about, /info\n"
        "‚Äî –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —è–∑—ã–∫\n"
        "‚Äî –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Äî –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ñ–æ—Ç–æ –∏ —Å—Ç–∏–∫–µ—Ä—ã\n"
        "‚Äî –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã ¬´–ø—Ä–∏–≤–µ—Ç¬ª, ¬´–∫–∞–∫ –¥–µ–ª–∞¬ª, ¬´—á—Ç–æ –¥–µ–ª–∞–µ—à—å¬ª, ¬´–ø–æ–∫–∞¬ª\n"
        "‚Äî –ü–æ–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Äî –û—Ç–≤–µ—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏\n"
        "‚Äî –ú–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ü•≥"
        "‚Äî –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞ (—á–∏—Å–ª–æ, —Ç–µ–∫—Å—Ç, —Å–º–µ—à–∞–Ω–Ω–æ–µ)\n",
        parse_mode="HTML"
    )

@dp.message(Command("info"))
async def send_info(message: types.Message):
    user = message.from_user
    start_time = first_start_times.get(user.id, datetime.now().strftime("%d.%m.%Y %H:%M"))
    await message.answer(
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:</b>\n\n"
        f"ü™™ –ò–º—è: <b>{user.full_name}</b>\n"
        f"üÜî Telegram ID: <code>{user.id}</code>\n"
        f"üïí –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {start_time}",
        parse_mode="HTML"
    )

@dp.message(Command("mood"))
async def send_mood(message: types.Message):
    moods = ["üòä –û—Ç–ª–∏—á–Ω–æ–µ!", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "üò¥ –°–æ–Ω–Ω–æ–µ", "ü§© –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ!", "ü§î –ó–∞–¥—É–º—á–∏–≤–æ–µ"]
    await message.answer(f"üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–æ—Ç–∞: {random.choice(moods)}")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    print(f"[–§–æ—Ç–æ] –û—Ç {message.from_user.first_name}")
    await message.answer("–ö–ª–∞—Å—Å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞! üì∏")

@dp.message(F.sticker)
async def handle_sticker(message: types.Message):
    print(f"[–°—Ç–∏–∫–µ—Ä] –û—Ç {message.from_user.first_name}")
    await message.answer("–ü—Ä–∏–∫–æ–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! üòé")

@dp.message(F.text)
async def echo_message(message: types.Message):
    user_text = message.text.lower().strip()

    if user_text.startswith("/"):
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help")
        return

    if "?" in user_text:
        await message.answer("ü§î –•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –ù–æ —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞.")
        return

    greetings = ["–ü—Ä–∏–≤–µ—Ç!", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!", "–•—ç–π!", "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç!"]
    how_are_you = ["–û—Ç–ª–∏—á–Ω–æ!", "–ù–æ—Ä–º–∞–ª—å–Ω–æ, —Å–ø–∞—Å–∏–±–æ üòä", "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!", "–í—Å—ë —Å—É–ø–µ—Ä!"]
    what_doing = ["–û—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è üí¨", "–î—É–º–∞—é –æ –∫–æ–¥–µ Python üêç", "–ü–æ–º–æ–≥–∞—é —Å—Ç—É–¥–µ–Ω—Ç–∞–º! üéì"]
    goodbyes = ["–ü–æ–∫–∞!", "–î–æ —Å–∫–æ—Ä–æ–≥–æ!", "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!", "–£–≤–∏–¥–∏–º—Å—è üëã"]
    if user_text in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "—Ö–∞–π", "–π–æ"]:
        await message.answer(random.choice(greetings))
    elif user_text in ["–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ —Ç—ã"]:
        await message.answer(random.choice(how_are_you))
    elif user_text in ["—á—Ç–æ –¥–µ–ª–∞–µ—à—å", "—á–µ–º –∑–∞–Ω—è—Ç"]:
        await message.answer(random.choice(what_doing))
    elif user_text in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–±–∞–π"]:
        await message.answer(random.choice(goodbyes))
    else:
        await message.answer("üòÖ –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å.")

    #print(f"[–¢–µ–∫—Å—Ç –æ—Ç {message.from_user.first_name}]: {text}")
    #if text.isdigit():
    #    msg_type = "–≠—Ç–æ —á–∏—Å–ª–æ!"
    #elif text.isalpha():
    #    msg_type = "–≠—Ç–æ —Ç–µ–∫—Å—Ç!"
    #else:
    #    msg_type = "–°–º–µ—à–∞–Ω–Ω—ã–π –≤–≤–æ–¥!"

    #await message.answer(f"–¢—ã —Å–∫–∞–∑–∞–ª: {text}\n{msg_type}")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
